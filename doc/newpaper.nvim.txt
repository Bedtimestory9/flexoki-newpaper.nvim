================================================================================
                                                                 *newpaper.nvim*
                                                                                
newpaper.nvim is a colorscheme for NeoVim written in Lua with built in support
for native LSP, TreeSitter and many more plugins.

================================================================================
CONTENTS

    1. Features ................. |newpaper.nvim-features|
    2. Usage .................... |newpaper.nvim-usage|
    3. Styles ................... |newpaper.nvim-styles|
    4. Configuration ............ |newpaper.nvim-configuration|
    5. Lualine setings .......... |newpaper.nvim-lualine|
================================================================================
1. Features                                             *newpaper.nvim-features*

    + There are 2 styles to choose from:
        - light
        - dark

    + A wide array of supprted plugiuns like:
        - TreeSitter
        - LSP Diagnostics
        - LSP Saga
        - LSP Trouble
        - Nvim-Compe
        - Git Gutter
        - Git Messenger
        - Git Signs
        - Telescope.nvim
        - Nvim-Tree.lua
        - NERDTree
        - Indent-Blankline.nvim
        - Vim-Which-Key
        - WhichKey.nvim
        - Dashboard
        - BufferLine
        - Lualine
        - Neogit
        - Vim-Sneak
        - Nvim-Dap
        - Vim-Illuminate
        - packer.nvim
        - vimtex
        - glyph-palette.vim

    + Ability to have a different background on sidebar windows like Nvim-Tree,
      Terminal, Packer, Whichkey, QuickFix etc.

    + Asynchronous highlight loading which makes the theme extremely fast

    + Added functions for live style switching, without the need to reload
      NeoVim

================================================================================
2. Usage                                                   *newpaper.nvim-usage*

    To use the default settings, just apply the theme

    If you are using Vim-Script:
>
        colorscheme newpaper
<
    If you are using Lua:
>
        require('newpaper').setup()
<
    newpaper.nvim also includes a Lualine theme. Set it in your Lualine config
>
        require('lualine').setup ({
            options = {
                -- ... your lualine config
                theme = 'newpaper'
                -- ... your lualine config
            }
        })
<
================================================================================
3. Styles                                                 *newpaper.nvim-styles*

    The theme comes in 2 styles to choose from

    + Dark:
        This style is loosely based on the PaperColor dark color theme.

    + Light:
        This is the only light style in this colorscheme. It comes with a
        PaperColor white background.

    The styles are set by setting the global variable 'newpaper_style' to the
    desired style name

    For example:

        Vim-Script:
>
            let g:newpaper_style = 'dark'
<
        Lua:
>
            vim.g.newpaper_style = 'dark'
<
    Just make sure to set the style before applying the colorscheme

================================================================================
4. Configuration                                   *newpaper.nvim-configuration*

What sets newpaper.nvim appart from most Vim/NeoVim themes is the wide array
of options for customising the theme.

All options are set using global variables.

In order for these settings to take effect, they should be placed in your
init.vim/init.lua before applying the colorscheme

Options:

    + style              {string} (default = `'light'`)
        The theme comes in two styles:`'dark'`, `'light'`

    + editor_better_view {booleans} (default = true)
        Make some interface like menu, title of editor and plugins
        menu bold and italic

    + contrast_sidebar   {booleans} (default = false)
        Make sidebars menus like nvimâ€“tree different foreground and background 

    + sidebars           {table} (default = {})
        Set a contrast background on sidebar-like windows.
        For example: `{"qf", "vista_kind", "terminal", "packer"}`

    + contrast_float     {booleans} (default = true)
        Make popup menus like nvim-compe, lsp-saga have a different
        foreground and background

    + contrast_telescope {booleans} (default = true)
        Make Telescope have a different foreground and background 

    + operators_bold     {booleans} (default = true)
        Make booleans, escape characters, operators, delimiter like =,<>/* bold 

    + keywords           {string} (default = `'bold'`)
        Make keywords like if, for, while etc. bold, italic or NONE.
        Value: `'bold'`, `'italic'`, 'bold,italic' 'NONE'

    + tags               {string} (default = `'bold'`)
        Make HTML tagg bold, italic or NONE.
        Value: `'bold'`, `'italic'`, 'bold,italic' 'NONE'

    + tex_major          {string} (default = `'bold'`)
        Make only major tex word like\documentclass, \section, ... bold,
        italic or NONE. Value: `'bold'`, `'italic'`, `'bold,italic'` 'NONE'

    + tex_operators_bold {booleans} (default = true)
        Make tex operators bold 

    + tex_keywords       {string} (default = 'NONE')
        Make  other tex keywords bold, italic or NONE.
        Value: `'bold'`,`'italic'`, 'bold,italic' 'NONE'

    + tex_zone           {string} (default = `'italic'`)
        Make some tex ...Zone...  bold, italic or NONE.
        Value: `'bold'`, `'italic'`, 'bold,italic' 'NONE'

    + tex_arg            {string} (default = `'italic'`)
        Make some tex  ...Arg... bold, italic or NONE.
        Value: `'bold'`, `'italic'`, 'bold,italic' 'NONE'

    + italic_strings     {booleans} (default = true)
        Make strings italic 

    + italic_comments    {booleans} (default = true)
        Make comments italic 

    + italic_functions   {booleans} (default = false)
        Make function calls and names italic

    + italic_variables   {booleans} (default = false)
        Make variable names and identifiers italic

    + borders            {booleans} (default = true)
        Enable the border between vertically split windows visible 

    + disable_background {booleans} (default = false)
        Disable the setting of background color so that NeoVim can use
        yours terminal background

    + lsp_virtual_text_bg{booleans} (default = true)
        Enable background color for LSP virtual text

    + hide_eob           {booleans} (default = false)
        Hide the end of buffer lines (~)

    + colors             {table} (default = {})
        Override the default colors and use your own.
        Also owerride lualine colors if have same name for more good view.
        vim.g.newpaper_colors   = { black = "#000000", bg = "#0F111A" }

    + lualine_bold       {booleans} (default = true)
        When true, section headers in the lualine theme will be bold 

    + lualine_style      {string} (default = `'light'`)
        Set different style from main theme:`'dark'`, `'light'`


Default settings:
>
    require('newpaper').setup({
        style               = 'light'`,
        editor_better_view  = true,
        contrast_sidebar    = false,
        sidebars            = {},
        contrast_float      = true,
        contrast_telescope  = true,
        operators_bold      = true,
        keywords            = 'bold',
        tags                = 'bold',
        tex_major           = 'bold',
        tex_operators_bold  = true,
        tex_keywords        = 'NONE',
        tex_zone            = 'italic',
        tex_arg             = 'italic',
        italic_strings      = true,
        italic_comments     = true,
        italic_functions    = false,
        italic_variables    = false,
        borders             = true,
        disable_background  = false,
        lsp_virtual_text_bg = true,
        hide_eob            = false,
        colors              = {},
        lualine_bold        = true,
        lualine_style       = 'light'
    })
<
Example config in init.lua:
>
    vim.g.newpaper_style    = 'dark'
    vim.g.newpaper_keywords = 'italic'
    vim.g.newpaper_borders  = false
    vim.g.newpaper_colors   = { black = "#000000", bg = "#0F111A" }
    require('newpaper').setup()
<
Or better init.lua:
>
    require('newpaper').setup({
        style    = 'dark',
        keywords = 'italic',
        borders  = false,
        colors   = { black = "#000000", bg = "#0F111A" }
    })
<
Example config in init.vim:
>
    lua << EOF 
        require('newpaper').setup({
            style    = 'dark',
            keywords = 'italic',
            borders  = false,
            colors   = { black = "#000000", bg = "#0F111A" }
        })
    EOF
<
================================================================================
5. Lualine settings                                      *newpaper.nvim-lualine*


To enable the newpaper theme for Lualine, simply specify it in your lualine settings:

in init.lua:
>
    require('lualine').setup {
        options = {
            -- ... your lualine config
            theme = 'newpaper'
            -- ... your lualine config
        }
    }
<
    Lualine style automatically using style from main theme


NOTE You can temporally use just only lualine theme with any others colorscheme.
It also depend from vim.o.background

init.lua:
>
    -- Set bold style
    vim.g.newpaper_lualine_bold = true
    -- If want to enable style like in main colorscheme no need to set style
    -- of lualine
    vim.g.newpaper_lualine_style = `'light'`
    -- Also you can predefine colors
    vim.g.newpaper_colors        = {teal = '#008080'}

    -- disable main theme
    -- require('newpaper').setup()

    -- enable other colorscheme
    -- ...
<
================================================================================
vim:tw=78:ts=4:ft=help:norl:
