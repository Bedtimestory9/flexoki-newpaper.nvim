================================================================================
                                                                 *newpaper.nvim*

newpaper.nvim is a colorscheme for NeoVim written in Lua with built in support
for native LSP, TreeSitter and many more plugins.

================================================================================
CONTENTS                                                *newpaper.nvim-contents*

Features ................................: |newpaper.nvim-features|
Usage ...................................: |newpaper.nvim-usage|
Styles ..................................: |newpaper.nvim-styles|
Configuration ...........................: |newpaper.nvim-configuration|
Commands ................................: |newpaper.nvim-commands|
Lualine setings .........................: |newpaper.nvim-lualine|
================================================================================
FEATURES                                                *newpaper.nvim-features*

    + There are 2 styles to choose from:
        - light
        - dark

    + A wide array of supprted plugiuns like:
        - bufferline.nvim
        - cheatsheet.nvim
        - Dashboard
        - Git Gutter
        - Git Signs
        - git-messenger
        - glyph-palette.vim
        - headlines.nvim
        - Indent-Blankline.nvim
        - lazygit.nvim
        - litee.nvim
        - LSP Diagnostics
        - lspsaga
        - Lualine
        - mason.nvim
        - Neogit
        - nvim-cmp
        - nvim-dap
        - nvim-dap-ui
        - nvim-dap-virtual-text
        - nvim-lsp-installer
        - nvim-notify
        - Nvim-Tree.lua
        - nvim-web-devicons
        - packer.nvim
        - rainbow-delimiters.nvim
        - symbols-outline.nvim
        - Telescope.nvim
        - todo-comments.nvim
        - TreeSitter
        - Trouble
        - vim-illuminate
        - Vim-Jinja2-Syntax
        - vim-LanguageTool
        - vim-lua
        - vim-rbs
        - vim-ruby
        - vim-sneak
        - vim-toml
        - vimtex
        - vista.vim
        - WhichKey.nvim

    + Ability to have a different background on sidebar windows like Nvim-Tree,
      Terminal, Packer, Whichkey, QuickFix etc.

    + Asynchronous highlight loading which makes the theme extremely fast

    + Added functions for live style switching, without the need to reload
      NeoVim

    + support LSP SEMANTIC HIGHLIGHTS

================================================================================
USAGE                                                      *newpaper.nvim-usage*

    To use the default settings, just apply the theme

    If you are using Vim-Script:
>vim
        colorscheme newpaper
<
    If you are using Lua:
>lua
        require("newpaper").setup()
<
    newpaper.nvim also includes a Lualine theme. Set it in your Lualine config
>lua
        require("lualine").setup ({
            options = {
                -- ... your lualine config
            }
        })
<
================================================================================
STYLES                                                    *newpaper.nvim-styles*

    The theme comes in 2 styles to choose from

    + Dark:
        This style is loosely based on the PaperColor dark color theme.

    + Light:
        This is the only light style in this colorscheme. It comes with a
        PaperColor white background.

    The styles are set by setting the global variable "newpaper_style" to the
    desired style name

    For example:

        Vim-Script:
>vim
            let g:newpaper_style = "dark"
<
        Lua:
>lua
            vim.g.newpaper_style = "dark"
<
    Just make sure to set the style before applying the colorscheme

================================================================================
CONFIGURATION                                      *newpaper.nvim-configuration*

What sets newpaper.nvim appart from most Vim/NeoVim themes is the wide array
of options for customising the theme.

All options are set using global variables.

In order for these settings to take effect, they should be placed in your
init.vim/init.lua before applying the colorscheme

Options:

    + style              {string} (default = `"light"`)
        The theme comes in two styles: `"dark"`, `"light"`

    + editor_better_view {booleans} (default = true)
        Make some interface like menu, title of editor and plugins
        menu bold and italic

    + terminal           {string} (default = `"contrast"`)
        Make `:terminal` window in different styles.
        Value: `"bg"`, `"contrast"`, `"inverse"`, `"inverse_transparent"`
        `
    + sidebars_contrast  {table} (default = {})
        Set a contrast background on sidebar-like windows.
        Example: `{ "NvimTree", "vista_kind", "packer", "Trouble" }`
        `"NvimTree"` and `"Trouble"` groups has own highlight colors.
        Can be overridden separate from others sidebars.

    + contrast_float     {booleans} (default = true)
        Make popup menus like nvim-compe, lsp-saga have a different
        foreground and background

    + contrast_telescope {booleans} (default = true)
        Make Telescope have a different foreground and background

    + operators_bold     {booleans} (default = true)
        Make booleans, escape characters, operators
        like `=`, `/`, `*`, `+`, `-`, `&`, `%`, `#`, `~`, `<`, `>`, `|` etc bold

    + delimiter_bold     {booleans} (default = false)
        Make delimiter `,`,`;`,`:`,`.` bold

    + brackets_bold      {booleans} (default = false)
        Make brackets like `{}`, `()`, `[]` bold

    + keywords           {string} (default = `"bold"`)
        Make keywords like `if`, `for`, `while` etc. bold, italic or NONE.
        Value: `"bold"`, `"italic"`, `"bold,italic"`, `"NONE"`

    + tags               {string} (default = `"bold"`)
        Make HTML tags bold, italic or NONE.
        Value: `"bold"`, `"italic"`, `"bold,italic"`, `"NONE"`

    + tags_brackets_bold {booleans} (default = true)
        Make tags delimiters like `<` or `/>` bold

    + tex_major          {string} (default = `"bold"`)
        Make only major tex word like\documentclass, \section, ... bold,
        italic or NONE. Value: `"bold"`, `"italic"`, `"bold,italic"`, `"NONE"`

    + tex_operators_bold {booleans} (default = true)
        Make tex operators bold

    + tex_brackets_bold  {booleans} (default = false)
        Make tex brackets like `{}`, `[]` bold

    + tex_math_delim_bold {booleans} (default = false)
        Make tex math zone delimeters like `\(\)`, `\[\]`, `$ $`, `$$ $$` bold

    + tex_keywords       {string} (default = `"NONE"`)
        Make  other tex keywords bold, italic or NONE.
        Value: `"bold"`, `"italic"`, `"bold,italic"`, `"NONE"`

    + tex_zone           {string} (default = `"italic"`)
        Make some tex ...Zone...  bold, italic or NONE.
        Value: `"bold"`, `"italic"`, `"bold,italic"`, `"NONE"`

    + tex_arg            {string} (default = `"italic"`)
        Make some tex  ...Arg... bold, italic or NONE.
        Value: `"bold"`, `"italic"`, `"bold,italic"`, `"NONE"`

    + error_highlight    {string} (default = `"undercurl"`)
        Make spell or `tex`-files errors hightlighting with
        background, undercurl, both or NONE
        Value: `"bg"`, `"undercurl"`, `"both"`, `"NONE"`.

    + italic_strings     {booleans} (default = true)
        Make strings italic

    + italic_comments    {booleans} (default = true)
        Make comments italic

    + italic_doc_comments {booleans} (default = true)
        Make comments documenting code italic

    + italic_functions   {booleans} (default = false)
        Make function calls and names italic

    + italic_variables   {booleans} (default = false)
        Make variable names and identifiers italic

    + borders            {booleans} (default = true)
        Enable the border between vertically split windows visible

    + disable_background {booleans} (default = false)
        Disable the setting of background color so that NeoVim can use
        yours terminal background

    + lsp_virtual_text_bg {booleans} (default = true)
        Enable background color for LSP virtual text

    + hide_eob           {booleans} (default = false)
        Hide the end of buffer lines (`~`)

    + colors             {table} (default = {})
        Override the default colors and use your own.
        Also owerride lualine colors if have same name for more good view.
        See possible value in sorce code `lua/newpaper/colors.lua[13:170, 174:331]`

>lua
        vim.g.newpaper_colors = { black = "#000000", bg = "#0F111A" }
<
    + colors_advanced    {table} (default = {})
        Override the advanced default colors and use your own.
        See possible value in sorce code `lua/newpaper/colors.lua[331:481]`

>lua
        vim.g.newpaper_colors_advanced = { keyword = "#AA00AA", string = "#008800" }
<
    + custom_highlights  {table} (default = {})
        Override the default and plugins highlights groups. Table  predefine
        any syntax colors. Use `fg`, `bg`, `sp`, `style` style options.
        `fg => guifg`, `bg => guibg`, `sp => guisp`, `style => gui`

>lua
        vim.g.newpaper_custom_highlights = {
            Number    = { fg = "#00FF00" },
            rubyClass = { fg = "#00FFF0" },
            Comment   = { fg = "#FF0000", style = "italic,underline" }
        }
<
    + lualine_bold       {booleans} (default = true)
        When true, section headers in the lualine theme will be bold

    + lualine_style      {string} (default = `"light"`)
        Set different style from main theme: `"dark"`, `"light"`

    + devicons_custom    {table} (default = {})
        Set devicons custom color(override all icons by one color).
        Use `gui`, `cterm` or both options

>lua
    vim.g.devicons_custom = { gui = "#FFFF00", cterm = 3}
<

Default settings:
>lua
    require("newpaper").setup({
        style               = "light",
        editor_better_view  = true,
        terminal            = "contrast",
        sidebars_contrast   = {},
        contrast_float      = true,
        contrast_telescope  = true,
        operators_bold      = true,
        delimiters_bold     = false,
        brackets_bold       = false,
        keywords            = "bold",
        tags                = "bold",
        tags_brackets_bold  = true,
        tex_major           = "bold",
        tex_operators_bold  = true,
        tex_brackets_bold   = false,
        tex_math_delim_bold = false,
        tex_keywords        = "NONE",
        tex_zone            = "italic",
        tex_arg             = "italic",
        error_highlight     = "undercurl",
        italic_strings      = true,
        italic_comments     = true,
        italic_doc_comments = true,
        italic_functions    = false,
        italic_variables    = false,
        borders             = true,
        disable_background  = false,
        lsp_virtual_text_bg = true,
        hide_eob            = false,
        colors              = {},
        colors_advanced     = {},
        custom_highlights   = {},
        lualine_bold        = true,
        lualine_style       = "light",
        devicons_custom     = {},
    })
<
Example config in lua with global variables
>lua
    vim.g.newpaper_style             = "dark"
    vim.g.newpaper_keywords          = "italic"
    vim.g.newpaper_borders           = false
    vim.g.newpaper_colors            = { teal = "#0000FF" }
    vim.g.newpaper_colors_advanced   = { keyword = "#AA00AA", string = "#008800" }
    vim.g.newpaper_custom_highlights = {
        Float     = { fg = vim.g.newpaper_colors.teal },
        Number    = { fg = "#00FF00" },
        rubyClass = { fg = "#00FFF0" },
        Comment   = { fg = "#FF0000", style = "italic,underline" }
    }
<
OR better with user configuration
>lua
    local colors            = { teal = "#0000FF" } -- use one color for many groups
    local colors_advanced   = { keyword = "#AA00AA", string = "#008800" }
    local custom_highlights = {
              Float     = { fg = colors.teal }, -- prefer override by name
              Number    = { fg = "#00FF00" },   -- but hex colos also good
              rubyClass = { fg = "#00FFF0" },
              Comment   = { fg = "#FF0000", style = "italic,underline" },
          }
    require("newpaper").setup({
        style    = "dark",
        keywords = "italic",
        -- ...
        colors              = colors,
        colors_advanced     = colors_advanced,
        custom_highlights   = custom_highlights,
        -- ...
        devicons_custom     = { gui = "#FFFF00", cterm = 3},

    })
<
Example config in init.vim:
>vim
    lua << EOF
        require("newpaper").setup({
            style    = "dark",
            keywords = "italic",
            borders  = false,
            colors   = { black = "#000000", bg = "#0F111A" }
        })
    EOF
<
================================================================================
COMMANDS                                                *newpaper.nvim-commands*

`:NewpaperLight`    Change style to light mode(by default)
`:NewpaperDark`     Change style to dark mode

================================================================================
LUALINE SETTINGS                                         *newpaper.nvim-lualine*


To enable the newpaper theme for Lualine, specify it in your lualine settings:

in init.lua:
>lua
    require("lualine").setup {
        options = {
            -- ... your lualine config
        }
    }
<
    Lualine theme name and style automatically using from main theme


NOTE You can temporally use just only lualine theme with any colorscheme.
It also depend from vim.o.background

init.lua:
>lua
    -- Set bold style
    vim.g.newpaper_lualine_bold = true
    -- If want to enable style like in main colorscheme no need to set style
    -- of lualine
    vim.g.newpaper_lualine_style = "light"
    -- Also you can predefine colors
    vim.g.newpaper_colors        = {teal = "#008080"}

    -- disable main theme
    -- require("newpaper").setup()

    -- enable other colorscheme
    -- ...
<
================================================================================
vim:tw=78:ts=4:ft=help:norl:
